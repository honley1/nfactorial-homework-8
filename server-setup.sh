#!/bin/bash

# =================================================================
# üñ•Ô∏è Server Setup Script for Task Manager
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
# =================================================================

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_NAME="task-manager"
PROJECT_USER="taskmanager"
PROJECT_DIR="/opt/${PROJECT_NAME}"

echo -e "${BLUE}üñ•Ô∏è Server Setup for ${PROJECT_NAME}${NC}"
echo "============================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ sudo${NC}"
    exit 1
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    echo -e "${YELLOW}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...${NC}"
    apt update && apt upgrade -y
    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
install_basic_packages() {
    echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...${NC}"
    
    apt install -y \
        curl \
        wget \
        git \
        htop \
        nano \
        vim \
        unzip \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        ufw \
        fail2ban \
        certbot \
        python3-certbot-nginx
    
    echo -e "${GREEN}‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
create_project_user() {
    echo -e "${YELLOW}üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${PROJECT_USER}...${NC}"
    
    if ! id "${PROJECT_USER}" &>/dev/null; then
        adduser --system --group --home "${PROJECT_DIR}" --shell /bin/bash "${PROJECT_USER}"
        usermod -aG docker "${PROJECT_USER}"
        echo -e "${GREEN}‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${PROJECT_USER} —Å–æ–∑–¥–∞–Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${PROJECT_USER} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
setup_ssh_security() {
    echo -e "${YELLOW}üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...${NC}"
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH
    cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SSH
    sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSH
    systemctl restart ssh
    
    echo -e "${GREEN}‚úÖ SSH –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å SSH –∫–ª—é—á –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º!${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
setup_advanced_firewall() {
    echo -e "${YELLOW}üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ firewall...${NC}"
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    ufw --force reset
    ufw default deny incoming
    ufw default allow outgoing
    
    # SSH
    ufw allow ssh
    
    # HTTP/HTTPS
    ufw allow 80/tcp
    ufw allow 443/tcp
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    ufw limit ssh
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ
    ufw --force enable
    
    echo -e "${GREEN}‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Fail2Ban
setup_fail2ban() {
    echo -e "${YELLOW}üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Fail2Ban...${NC}"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è SSH
    cat > /etc/fail2ban/jail.d/ssh.conf << 'EOF'
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
findtime = 600
EOF
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Nginx (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    cat > /etc/fail2ban/jail.d/nginx.conf << 'EOF'
[nginx-http-auth]
enabled = true
filter = nginx-http-auth
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600

[nginx-limit-req]
enabled = true
filter = nginx-limit-req
logpath = /var/log/nginx/error.log
maxretry = 10
bantime = 600
EOF
    
    systemctl enable fail2ban
    systemctl start fail2ban
    
    echo -e "${GREEN}‚úÖ Fail2Ban –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    echo -e "${YELLOW}üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${NC}"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É docker
    usermod -aG docker "${PROJECT_USER}"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    systemctl enable docker
    systemctl start docker
    
    echo -e "${GREEN}‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    echo -e "${YELLOW}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...${NC}"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    
    chmod +x /usr/local/bin/docker-compose
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–ª–∏–Ω–∫–∞
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    echo -e "${GREEN}‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    echo -e "${YELLOW}üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p "${PROJECT_DIR}"/{data,logs,backups,ssl}
    mkdir -p /var/log/"${PROJECT_NAME}"
    mkdir -p /opt/backups/"${PROJECT_NAME}"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chown -R "${PROJECT_USER}":"${PROJECT_USER}" "${PROJECT_DIR}"
    chown -R "${PROJECT_USER}":"${PROJECT_USER}" /var/log/"${PROJECT_NAME}"
    chown -R "${PROJECT_USER}":"${PROJECT_USER}" /opt/backups/"${PROJECT_NAME}"
    
    chmod -R 755 "${PROJECT_DIR}"
    
    echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    echo -e "${YELLOW}üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...${NC}"
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    cat > /usr/local/bin/disk-monitor.sh << 'EOF'
#!/bin/bash
THRESHOLD=80
USAGE=$(df / | awk 'NR==2 {print $5}' | cut -d'%' -f1)

if [ $USAGE -gt $THRESHOLD ]; then
    echo "WARNING: Disk usage is ${USAGE}% on $(hostname)"
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
fi
EOF
    
    chmod +x /usr/local/bin/disk-monitor.sh
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cron (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å)
    echo "0 * * * * root /usr/local/bin/disk-monitor.sh" >> /etc/crontab
    
    echo -e "${GREEN}‚úÖ –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
setup_auto_updates() {
    echo -e "${YELLOW}üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...${NC}"
    
    apt install -y unattended-upgrades
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    cat > /etc/apt/apt.conf.d/50unattended-upgrades << 'EOF'
Unattended-Upgrade::Allowed-Origins {
    "${distro_id}:${distro_codename}-security";
    "${distro_id}ESMApps:${distro_codename}-apps-security";
    "${distro_id}ESM:${distro_codename}-infra-security";
};

Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
EOF
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    echo 'APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";' > /etc/apt/apt.conf.d/20auto-upgrades
    
    echo -e "${GREEN}‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
create_ssl_cert() {
    echo -e "${YELLOW}üîí –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...${NC}"
    
    SSL_DIR="${PROJECT_DIR}/ssl"
    
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout "${SSL_DIR}/key.pem" \
        -out "${SSL_DIR}/cert.pem" \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
    
    chown "${PROJECT_USER}":"${PROJECT_USER}" "${SSL_DIR}"/*
    chmod 600 "${SSL_DIR}"/*
    
    echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è –≠—Ç–æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è${NC}"
    echo -e "${YELLOW}   –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Let's Encrypt${NC}"
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–∞—Ö
show_setup_summary() {
    echo ""
    echo -e "${GREEN}üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo "==========================================="
    echo -e "${BLUE}üìã –ß—Ç–æ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:${NC}"
    echo "  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    echo "  ‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    echo "  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${PROJECT_USER} —Å–æ–∑–¥–∞–Ω"
    echo "  ‚úÖ SSH –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    echo "  ‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo "  ‚úÖ Fail2Ban –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo "  ‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "  ‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
    echo "  ‚úÖ –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo "  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    echo "  ‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω"
    echo ""
    echo -e "${BLUE}üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:${NC}"
    echo "  ‚Ä¢ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_DIR}"
    echo "  ‚Ä¢ –õ–æ–≥–∏: /var/log/${PROJECT_NAME}"
    echo "  ‚Ä¢ –ë—ç–∫–∞–ø—ã: /opt/backups/${PROJECT_NAME}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo "  1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ ${PROJECT_DIR}"
    echo "  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª"
    echo "  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ deploy.sh"
    echo "  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è"
    echo "  5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    echo ""
    echo -e "${BLUE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞: sudo -u ${PROJECT_USER} -i"
    echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤: journalctl -u ${PROJECT_NAME}"
    echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å firewall: ufw status"
    echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å fail2ban: fail2ban-client status"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${YELLOW}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    
    update_system
    install_basic_packages
    create_project_user
    setup_ssh_security
    setup_advanced_firewall
    setup_fail2ban
    install_docker
    install_docker_compose
    setup_directories
    setup_monitoring
    setup_auto_updates
    create_ssl_cert
    
    show_setup_summary
}

# –ó–∞–ø—É—Å–∫
main 