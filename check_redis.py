#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import redis
import sys

def check_redis():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        response = r.ping()
        if response:
            print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info = r.info()
        print(f"üìä –í–µ—Ä—Å–∏—è Redis: {info['redis_version']}")
        print(f"üìä –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {info['uptime_in_seconds']} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {info['connected_clients']}")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {info['used_memory_human']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π Celery
        celery_queue = r.llen('celery')
        print(f"üìù –û—á–µ—Ä–µ–¥—å Celery: {celery_queue} –∑–∞–¥–∞—á")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –∑–∞–¥–∞—á
        task_keys = r.keys('celery-task-meta-*')
        print(f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(task_keys)}")
        
        return True
        
    except redis.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω:")
        print("   - Docker: docker-compose up redis")
        print("   - –õ–æ–∫–∞–ª—å–Ω–æ: redis-server")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    success = check_redis()
    sys.exit(0 if success else 1)