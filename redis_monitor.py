#!/usr/bin/env python3
"""
Redis Monitor - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python redis_monitor.py
"""

import redis
import json
import time
from datetime import datetime
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 0

class RedisMonitor:
    def __init__(self, host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB):
        try:
            self.redis_client = redis.Redis(
                host=host, 
                port=port, 
                db=db, 
                decode_responses=True,
                socket_connect_timeout=5,
                socket_timeout=5
            )
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.redis_client.ping()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ({host}:{port}) —É—Å–ø–µ—à–Ω–æ!")
        except redis.ConnectionError:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis ({host}:{port})")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            sys.exit(1)

    def get_redis_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis"""
        info = self.redis_client.info()
        return {
            'version': info['redis_version'],
            'mode': info['redis_mode'],
            'uptime': info['uptime_in_seconds'],
            'connected_clients': info['connected_clients'],
            'used_memory': info['used_memory_human'],
            'used_memory_peak': info['used_memory_peak_human'],
            'keyspace_hits': info['keyspace_hits'],
            'keyspace_misses': info['keyspace_misses'],
            'total_commands_processed': info['total_commands_processed'],
            'instantaneous_ops_per_sec': info['instantaneous_ops_per_sec']
        }

    def get_celery_queues(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—á–µ—Ä–µ–¥—è—Ö Celery"""
        queues = {}
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å Celery
            main_queue_length = self.redis_client.llen('celery')
            queues['celery'] = main_queue_length
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
            for queue_name in ['email', 'reports', 'cleanup']:
                queue_length = self.redis_client.llen(queue_name)
                if queue_length > 0:
                    queues[queue_name] = queue_length
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            
        return queues

    def get_celery_tasks(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö Celery"""
        try:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = []
            task_keys = self.redis_client.keys('celery-task-meta-*')
            
            for key in task_keys[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∑–∞–¥–∞—á
                task_data = self.redis_client.get(key)
                if task_data:
                    try:
                        task_info = json.loads(task_data)
                        active_tasks.append({
                            'task_id': key.replace('celery-task-meta-', ''),
                            'status': task_info.get('status', 'UNKNOWN'),
                            'result': str(task_info.get('result', ''))[:100] + '...' if len(str(task_info.get('result', ''))) > 100 else task_info.get('result', '')
                        })
                    except json.JSONDecodeError:
                        continue
                        
            return active_tasks
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return []

    def get_database_keys(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª—é—á–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db_info = self.redis_client.info('keyspace')
            keys_info = {}
            
            for db, info in db_info.items():
                if db.startswith('db'):
                    keys_info[db] = {
                        'keys': info['keys'],
                        'expires': info['expires'],
                        'avg_ttl': info['avg_ttl']
                    }
                    
            return keys_info
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: {e}")
            return {}

    def monitor(self, interval=5, continuous=False):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            while True:
                print("\n" + "="*60)
                print(f"üîÑ Redis Monitor - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print("="*60)
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                print("\nüìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                info = self.get_redis_info()
                for key, value in info.items():
                    print(f"  {key}: {value}")
                
                # –û—á–µ—Ä–µ–¥–∏ Celery
                print("\nüìù –û—á–µ—Ä–µ–¥–∏ Celery:")
                queues = self.get_celery_queues()
                if queues:
                    for queue, length in queues.items():
                        print(f"  {queue}: {length} –∑–∞–¥–∞—á")
                else:
                    print("  –û—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç—ã")
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                print("\n‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                tasks = self.get_celery_tasks()
                if tasks:
                    for task in tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                        print(f"  ID: {task['task_id'][:8]}... | –°—Ç–∞—Ç—É—Å: {task['status']} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {task['result']}")
                    if len(tasks) > 5:
                        print(f"  ... –∏ –µ—â–µ {len(tasks) - 5} –∑–∞–¥–∞—á")
                else:
                    print("  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                
                # –ö–ª—é—á–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                print("\nüóÇÔ∏è  –ö–ª—é—á–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
                db_keys = self.get_database_keys()
                if db_keys:
                    for db, info in db_keys.items():
                        print(f"  {db}: {info['keys']} –∫–ª—é—á–µ–π, {info['expires']} —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º")
                else:
                    print("  –ù–µ—Ç –∫–ª—é—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
                if not continuous:
                    break
                    
                print(f"\n‚è±Ô∏è  –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    def test_redis_operations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Redis"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –æ–ø–µ—Ä–∞—Ü–∏–π:")
        
        try:
            # –¢–µ—Å—Ç SET/GET
            test_key = "test:monitor:ping"
            test_value = f"pong_{int(time.time())}"
            
            self.redis_client.set(test_key, test_value, ex=60)  # TTL 60 —Å–µ–∫
            retrieved_value = self.redis_client.get(test_key)
            
            if retrieved_value == test_value:
                print("  ‚úÖ SET/GET –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            else:
                print("  ‚ùå SET/GET –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–æ–≤ (–¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π Celery)
            list_key = "test:monitor:list"
            self.redis_client.lpush(list_key, "test_item")
            list_length = self.redis_client.llen(list_key)
            self.redis_client.delete(list_key)
            
            if list_length > 0:
                print("  ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            else:
                print("  ‚ùå –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.redis_client.delete(test_key)
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Redis Monitor...")
    
    monitor = RedisMonitor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    monitor.test_redis_operations()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    monitor.monitor(continuous=False)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    try:
        response = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? (y/N): ").strip().lower()
        if response in ['y', 'yes', '–¥', '–¥–∞']:
            print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...")
            monitor.monitor(interval=5, continuous=True)
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main() 